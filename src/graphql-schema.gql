# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateRacerInput {
  name: String!
}

input CreateUserInput {
  nickname: String!
  profileImage: String
  provider: String!
  role: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetManyInput {
  """count or data or all, default = data"""
  dataType: String

  """{[key of entity]: "ASC or DESC"}"""
  order: JSON
  pagination: IPagination
  relations: [String!]
  where: JSON
}

input GetOneInput {
  relations: [String!]
  where: JSON
}

type GetPlaceType {
  count: Float
  data: [Place!]
}

type GetRacerType {
  count: Float
  data: [Racer!]
}

type GetUserType {
  count: Float
  data: [User!]
}

input IPagination {
  """Started from 0"""
  page: Int!

  """Size of page"""
  size: Int!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JwtWithUser {
  createdAt: DateTime!
  id: ID!
  jwt: String!
  nickname: String!
  place: [Place!]
  profileImage: String
  provider: String!
  role: String!
  updatedAt: DateTime!
  username: String!
}

type Mutation {
  createManyRacer(input: [CreateRacerInput!]!): [Racer!]!
  createManyUsers(input: [CreateUserInput!]!): [User!]!
  createRacer(input: CreateRacerInput!): Racer!
  createUser(input: CreateUserInput!): User!
  deleteFiles(keys: [String!]!): Boolean!
  deleteRacer(id: Float!): Racer!
  deleteUser(id: String!): JSON!
  kakaoLogin(accessToken: String!): JwtWithUser!
  updateRacer(id: Float!, input: UpdateRacerInput!): Racer!
  updateUser(id: String!, input: UpdateUserInput!): User!
  uploadFile(file: Upload!): String!
  uploadFiles(files: [Upload!]!): [String!]!
}

type Place {
  address: String!
  id: ID!
  name: String!
  user: User
}

type Query {
  getManyPlaces(input: GetManyInput): GetPlaceType!
  getManyRacers(input: GetManyInput): GetRacerType!
  getManyUsers(input: GetManyInput): GetUserType!
  getMe: User!
  getOneRacer(input: GetOneInput): Racer!
  getOneUser(input: GetOneInput): User!
}

type Racer {
  id: ID!
  name: String!
}

input UpdateRacerInput {
  name: String!
}

input UpdateUserInput {
  nickname: String
  profileImage: String
  provider: String
  username: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  createdAt: DateTime!
  id: ID!
  nickname: String!
  place: [Place!]
  profileImage: String
  provider: String!
  role: String!
  updatedAt: DateTime!
  username: String!
}